<?php

define('OPEN_REP_CONTACT_TWEET_TEXT_DEFAULT', '.@{twitter} Tweet Text sample: Income inequality has grown steadily since the 1970\'s. Can you pls fix?');
define('OPEN_REP_CONTACT_TWEET_HTML_DEFAULT', '.<em>@{twitter}</em> Tweet HTML sample: Income inequality has grown steadily since the 1970\'s. Can you pls fix? <strong>#fixInequality</strong>');

/**
 * Implements hook_menu().
 */
function open_rep_contact_menu() {
  $items = array();

  $items['admin/structure/block/open_rep_contact'] = array(
    'title' => 'Open Rep Instances',
    'description' => 'Manage your Open Rep Contact blocks.',
    'page callback' =>  'drupal_get_form',
    'page arguments' => array('open_rep_contact_add_block_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer blocks'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -16,
    'file' => 'inc/admin.inc',
  );

  $items['admin/structure/block/open_rep_contact/settings'] = array(
    'title' => 'Open Rep Connect Settings',
    'description' => 'Settings for Open Rep Connect',
    'page callback' =>  'drupal_get_form',
    'page arguments' => array('open_rep_contact_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer blocks'),
    'file' => 'inc/admin.inc',
  );

  return $items;
}

/**
 * Implements hook_libraries_info().
 */
function open_rep_contact_libraries_info() {
  $libraries = array();
  // For empty variable strings.
  $js_path = empty(variable_get('open_rep_contact_library_js_file', '')) ? 'js/orc.bundle.js' : variable_get('open_rep_contact_library_js_file', '');
  $css_path = empty(variable_get('open_rep_contact_library_css_file', '')) ? 'css/orc-styles.css' : variable_get('open_rep_contact_library_css_file', '');
  $libraries['open_rep_contact'] = array(
    'name' => 'Open Rep Contact',
    // TODO update when JS is released
    'vendor url' => 'https://bitbucket.org/colabcoop-ondemand/sevgen-twitter-widget/',
    'download url' => 'https://bitbucket.org/colabcoop-ondemand/sevgen-twitter-widget/downloads/open_rep_contact.tgz',
    'version callback' => 'open_rep_contact_return_true',
    'files' => array(
      'js' => array($js_path),
      'css' => array($css_path),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_block_info().
 */
function open_rep_contact_block_info() {
  $blocks = array();
  $orcs = open_rep_contact_get_widgets();
  if ($orcs) {
    foreach ($orcs as $name => $orc) {
      $blocks[$name] = array(
        'info' => $orc['title'],
      );
    }
  }
  return $blocks;
}

function open_rep_contact_block_configure($delta = '') {
  $orc_array = open_rep_contact_get_widgets($delta);
  if (isset($orc_array[$delta])) {
    $orc = $orc_array[$delta];
    $form = array();

    $form['settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Settings'),
    );

    $form['settings']['searchParams'] = array(
      '#type' => 'fieldset',
      '#title' => t('Search parameters for Civic Information API:'),
      '#description' => t('These are the ways we determine which governmental representatives to pull, based on an international standardized nomenclature. Documentation on the function arguments !docurl. Human-friendly information on what these settings mean !humanurl. (These are the ORC JS constructor args.)',
        array(
          '!docurl' => l(t('here'), "https://developers.google.com/civic-information/docs/v2/representatives/representativeInfoByAddress"),
          '!humanurl' => l(t('here'), "https://developers.google.com/civic-information/docs/v2/representatives")
        )
      ),
      '#collapsible' => TRUE,

      'settings__searchParams__levels' => array( // b/c this becomes flat array key later.
        '#type' => 'checkboxes',
        '#title' => t('A list of geographical office levels to filter by.'),
        '#default_value' => isset($orc['settings']['searchParams']['levels']) ? $orc['settings']['searchParams']['levels'] : array(),
        '#options' => drupal_map_assoc(array(
          'administrativeArea1',
          'administrativeArea2',
          'country',
          'international',
          'locality',
          'regional',
          'special',
          'subLocality1',
          'subLocality2',
        )),
      ),
      'settings__searchParams__roles' => array(
        '#type' => 'checkboxes',
        '#title' => t('A list of governmental office roles to filter by.'),
        '#description' => t('These are international names for governmental offices and therefore are not specific to the US system. They are also determined in relation to the geographical region selected above. For instance, if "country" is selected above, then "House of Representatives" is "legislatorLowerBody" while "Senate" is "legislatorUpperBody." "headOfGovernment" is POTUS. More info at the human-friendly link above.'),
        '#default_value' => isset($orc['settings']['searchParams']['roles']) ? $orc['settings']['searchParams']['roles'] : array(),
        '#options' => drupal_map_assoc(array(
          'deputyHeadOfGovernment',
          'executiveCouncil',
          'governmentOfficer',
          'headOfGovernment',
          'headOfState',
          'highestCourtJudge',
          'judge',
          'legislatorLowerBody',
          'legislatorUpperBody',
          'schoolBoard',
          'specialPurposeOfficer'
        )),
      ),
    );

    $form['settings']['templateStrings'] = array(
      '#type' => 'fieldset',
      '#title' => t('The template strings to be passed to the constructor:'),
      '#collapsible' => TRUE,

      'settings__templateStrings__headerText' => array(
        '#type' => 'textarea',
        '#title' => 'Header',
        '#description' => t('Raw HTML or text that will become the title/header'),
        '#default_value' => isset($orc['settings']['templateStrings']['headerText']) ? $orc['settings']['templateStrings']['headerText'] : '',
      ),

    );

    $form['twitter'] = array(
      '#title' => t('Twitter Settings'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,

      'tweets' =>  array(
        '#type' => 'fieldset',
        '#title' => t('Tweets'),
        '#collapsible' => TRUE,
        '#description' => t('Add tweets. To remove tweets, delete text and save form. To add more tweets, save the form and visit the page again. To re-order, cut and paste. (Sorry! No "add another" button on block form pages.)'),
      ),
    );

    $form_tweets =& $form['twitter']['tweets'];
    $tweet_count = isset($orc['tweets']) ? count($orc['tweets']) : 1;

    for ($i = 1; $i <= $tweet_count + 2; $i++) {
      $form_tweets[$i] = array(
        '#type' => 'fieldset',
      );
      $tweet_text_default = ($i == 1) ? OPEN_REP_CONTACT_TWEET_TEXT_DEFAULT : ''; // Display sample on first.
      $form_tweets[$i]["twitter__tweets__{$i}__tweetText"] = array(
        '#type' => 'textarea',
        '#title' => 'Tweet Text',
        '#description' => t('Enter a Tweet. %twitter will be replaced with the selected representative\'s twitter handle.', array('%twitter' => '{twitter}')),
        '#default_value' => isset($orc['twitter']['tweets'][$i]['tweetText']) ? $orc['twitter']['tweets'][$i]['tweetText'] : $tweet_text_default,
      );
      $tweet_html_default = ($i == 1) ? OPEN_REP_CONTACT_TWEET_HTML_DEFAULT : '';
      $form_tweets[$i]["twitter__tweets__{$i}__tweetHTML"] = array(
        '#type' => 'textarea',
        '#title' => 'Tweet HTML',
        '#description' => t('This optional HTML will be displayed to the user as representing this tweet. You can add, for instance italics or bold around "@repname." %twitter will be replaced with the selected representative\'s twitter handle.', array('%twitter' => '{twitter}')),
        '#default_value' => isset($orc['twitter']['tweets'][$i]['tweetHTML']) ? $orc['twitter']['tweets'][$i]['tweetHTML'] : $tweet_html_default,
      );
    }

    return $form;
  }
}

/**
 * Implements hook_block_save
 *
 * Passing values separated by a flat key ][ and they become a settings array saved to the
 * corresponding database field if found.
 */
function open_rep_contact_block_save($delta = '', $edit = array()) {
  $orc_array = open_rep_contact_get_widgets($delta);
  if (isset($orc_array[$delta])) {
    $orc = $orc_array[$delta];
    $edit_values = array();
    foreach ($edit as $key => $val) {
      if (strpos($key, '__') !== FALSE) {
        $edit_values = array_replace_recursive($edit_values, open_rep_contact_make_expanded_array_from_flat_key($key, $val));
      }
    }
    $record = drupal_array_merge_deep($orc, $edit_values);
    foreach ($record['twitter']['tweets'] as $i => $tweet) {
      if (empty($tweet['tweetText'])) {
        unset($record['twitter']['tweets'][$i]);
      }
    }
    $record['twitter']['tweets'] = array_values($record['twitter']['tweets']);
    drupal_write_record('open_rep_contact', $record, array('id'));
    cache_clear_all('open_rep_contact', 'cache', TRUE);
  }
}

/**
 * Implements hook_block_view().
 */
function open_rep_contact_block_view($delta = '') {
  $orc_array = open_rep_contact_get_widgets();
  if (isset($orc_array[$delta])) {
    $orc = $orc_array[$delta];
    if (empty($orc['settings']['searchParams']['levels'])) {
      drupal_set_message(t('You have not yet configured your ORC block. Set it up !url.', array('!url' => l(t('here'), "admin/structure/block/manage/open_rep_contact/{$delta}/configure"))));
      return;
    }
    drupal_add_js(array('open_rep_connect' => _open_rep_contact_get_js_settings_array($orc)), array('type' => 'setting'));
    drupal_add_js(drupal_get_path('module', 'open_rep_contact') . '/js/open_rep_contact_drupal.js', array('group' => JS_LIBRARY));
    libraries_load('open_rep_contact');
    return array('content' => array('#markup' => '<div id="orc-target"></div>'));
  }
}

function open_rep_contact_return_true () {
  return TRUE;
}

/**
 * @param $orc array of ORC block settings from DB.
 *
 * @return array Settings for passing to drupal_add_js
 */
function _open_rep_contact_get_js_settings_array($orc) {
  if (!($google_api_key = variable_get('open_rep_contact_google_api_key'))) {
    drupal_set_message(t('Open Rep Contact Google API key not set. Set it !url', array('!url' => l(t('here'), "admin/structure/block/open_rep_contact/settings"))), 'error');
    return array();
  }
  $tweet_texts = array();
  $tweet_htmls = array();
  foreach ($orc['twitter']['tweets'] as $i => $tweet) {
    $tweet_texts[$i] = $tweet['tweetText'];
    $tweet_htmls[$i] = isset($tweet['tweetHTML']) ? $tweet['tweetHTML'] : '';
  }
  $js_settings = array(
    'appRootPath' => base_path() . libraries_get_path('open_rep_contact'),
    'google' => array(
      'api' => array(
        'key' => $google_api_key,
      ),
    ),
    'target' => '#orc-target',
    'searchParams' => array(
      'levels' => array_values(array_filter($orc['settings']['searchParams']['levels'])),
      'roles' => array_values(array_filter($orc['settings']['searchParams']['roles'])),
    ),

    'templateStrings' => array(
      'headerText' => $orc['settings']['templateStrings']['headerText'],
      'tweetTexts' => $tweet_texts,
      'tweetHTMLs' => $tweet_htmls,
    ),
  );

  return $js_settings;
}

/**
 * Retrieve ORC widgets from DB. Optionally limit to one by machine name.
 *
 * @param string $widget String representing machine name of widget.
 *
 * @return array of orc widget or widgets keyed by machine name.
 */
function open_rep_contact_get_widgets($widget = NULL) {
  $cid = __FUNCTION__ . '_' . (string)$widget;
  $orcs = &drupal_static($cid);
  if (!isset($orcs)) {
    if ($cache = cache_get($cid)) {
      $orcs = $cache->data;
    }
    else {
      $orcs = array();
      $query = db_select('open_rep_contact', 'orc')->fields('orc');
      if ($widget) {
        $query->condition('name', $widget,'=');
      }
      foreach ($query->execute() as $row) {
        $orcs[$row->name] = (array) $row;
      }
      $blob_types = open_rep_contact_get_schema_blob_names();
      foreach($orcs as $orc_name => $orc) {
        foreach($orc as $field_name => $val) {
          if (in_array($field_name, $blob_types)) {
            $orcs[$orc_name][$field_name] = unserialize($val);
          }
        }
      }
      cache_set($cid, $orcs, 'cache');
    }
  }
  return $orcs;
}

/**
 * Returns all the field types from the given table schema that are blobs: that
 * is, need to be unserialized/serialized.
 *
 * @param string $table
 *
 * @return array
 */
function open_rep_contact_get_schema_blob_names($table = 'open_rep_contact'){
  $blobs = array();
  $schema = drupal_get_schema('open_rep_contact');
  foreach ($schema['fields'] as $field_name => $field) {
    if ($field['type'] == 'blob') {
      $blobs[] = $field_name;
    }
  }
  return $blobs;
}

/**
 * Takes a $key with $delimeter in it and returns an array with each delimited
 * part of the string as a child of parent values. At the deepest value, it puts
 * the value passed in as $val.
 *
 * @param $key string
 * @param $val mixed
 * @param string $delimeter
 *
 * @return array of expanded keys with value as deepest level.
 */
function open_rep_contact_make_expanded_array_from_flat_key($key, $val, $delimeter = '__') {
  $flat_key_array = explode($delimeter, $key);
  $last_index = count($flat_key_array) -1;
  $expanded_key_array = array();
  foreach ($flat_key_array as $index => $key_name) {
    if ($index == 0) {
      $expanded_key_array[$key_name] = array();
      $parent =& $expanded_key_array[$key_name];
    }
    else {
      $parent[$key_name] = array();
      $parent =& $parent[$key_name];
    }
    if ($last_index == $index) {
      $parent = $val;
    }
  }
  return $expanded_key_array;
}